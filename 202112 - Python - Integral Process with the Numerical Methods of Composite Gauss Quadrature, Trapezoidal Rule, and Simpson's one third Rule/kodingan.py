# -*- coding: utf-8 -*-
"""Kodingan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e6cTClgH8md08BgXTJYqxJ-PSoA8Z0CM

# No 1
"""

n_1 = []

for n in range (2,32):
  c_1 = n*1
  for i in range (1,n):
    n_1_array = float(c_1)
  n_1.append(n_1_array)
print(n_1)

"""## 1a"""

from scipy.integrate import quad
import math as mt
import numpy as np
import pandas as pd
from math import exp, pi

f = lambda x: (1/((2*mt.pi)**(1/2)))*mt.exp(-(x**2)/2)

s = int(input('Input bilangan bulat s, sebagai batas untuk pengintegralan='))
m = int(input('Input bilangan bulat m, sebagai jumlah panel (pembagi segmen integral)='))
n = int(input('Input bilangan bulat n, sebagai titik (pembagi dalam panel)='))

batas_bawah_1a = (-1)*(s)
batas_atas_1a = (s)
print('Batas bawah dari integral ini adalah=', batas_bawah_1a)
print('Batas atas dari integral ini adalah=', batas_atas_1a)

def gauss(f, batas_bawah_1a, batas_atas_1a, m, n):
    x = np.linspace(batas_bawah_1a, batas_atas_1a, m+1)
    integral_1a = 0
    for i in range(0,m):
        batas_bawah_baru = x[i]
        batas_atas_baru = x[i+1]
        ttk_tgh = (batas_atas_baru+batas_bawah_baru)/2
        h = (batas_atas_baru-batas_bawah_baru)/2
        [x_baru, k] = np.polynomial.legendre.leggauss(n)
        for j in range (0,n):
            gauss_total = 0
            gauss_total += k[j]*f((h*x_baru[j])+ttk_tgh)
            gauss_total *= h
            integral_1a += gauss_total
    return integral_1a

Gauss = gauss(f, batas_bawah_1a, batas_atas_1a, m, n) 

gauss = []

for n in range (2,32):
  hasil_1a = Gauss
  #for i in range (1,n):
    #Gauss = float(hasil_1a)
  gauss.append(Gauss)
print(gauss)

gauss_kolom = np.array(gauss).T # Mentranspose variabel "gauss" agar mudah dilihat outputnya
np.set_printoptions(precision=10)
print(gauss_kolom)

"""## 1b"""

import math as mt
import numpy as np
from math import exp, pi

f = lambda x: (1/((2*mt.pi)**(1/2)))*mt.exp(-(x**2)/2)

s = int(input('Input bilangan bulat s, sebagai batas untuk pengintegralan='))

batas_bawah_1b = (-1)*(s)
batas_atas_1b = (s)
print('Batas bawah dari integral ini adalah=', batas_bawah_1b)
print('Batas atas dari integral ini adalah=', batas_atas_1b)

trap =[]

for n in range(2,32):
  h =(batas_atas_1b-batas_bawah_1b)/n
  Trap = (f(batas_bawah_1b)+f(batas_atas_1b))
  for i in range (1,n):
    k = batas_bawah_1b + i*h
    Trap += 2*f(k)
  trap.append(h/2*Trap)
print(trap)

trap_kolom = np.array(trap).T # Mentranspose variabel "trap" agar mudah dilihat outputnya
np.set_printoptions(precision=10)
print(trap_kolom)

"""### Galat Relatif Trapesium"""

galat_trap = [] # Variabel kosong yang akan diisi hasil galat trap

for i in range(0,30):
  galat_trap.append (((gauss[i]-trap[i])/gauss[i])*100) # Memasukkan nilai galat relatif ke dalam variabel "galat_trap"

galat_relatif_trap_kolom = abs(np.array(galat_trap).T) # Mentranspose variabel "galat_relatif" agar mudah dilihat outputnya
np.set_printoptions(precision=10)
print(galat_relatif_trap_kolom)

"""### Tabel Gabungan Trapesium"""

data_1b = {'n' : n_1, 'Trapesium' : trap_kolom, 'Galat Relatif Trapesium (%)' : galat_relatif_trap_kolom} 
df_1b = pd.DataFrame(data=data_1b) # Membentuk data frame dari array n, trapesium, galat trapesium
print(np.around(df_1b,10))

"""## 1c"""

import math as mt
import numpy as np
from math import exp, pi

s = int(input('Input bilangan integral s sebagai batas untuk pengintegralan='))

batas_bawah_1c = (-1)*(s)
batas_atas_1c = (s)
print('Batas bawah dari integral ini adalah=', batas_bawah_1c)
print('Batas atas dari integral ini adalah=', batas_atas_1c)

def f(x):
    return (1/((2*mt.pi)**(1/2)))*mt.exp(-(x**2)/2)
def simpson13 (batas_bawah_1c,batas_atas_1c,n):
    h = (batas_atas_1c - batas_bawah_1c) / n
    hasil_1c = f(batas_bawah_1c) + f(batas_atas_1c)
    
    for i in range(1,n):
        k = batas_bawah_1c + i*h
        if i%2 == 0:
            hasil_1c = hasil_1c + 2 * f(k)
        else:
            hasil_1c = hasil_1c + 4 * f(k)
    hasil_1c = hasil_1c * h/3    
    return hasil_1c

intrvl = 2
sub_intrvl=[i for i in range(1,intrvl*16,intrvl)]
simpson_kelebihan=[simpson13(batas_bawah_1c, batas_atas_1c, intrvl) for intrvl in sub_intrvl]
simpson = np.delete(simpson_kelebihan, 0)
np.set_printoptions(precision=10)
print(simpson)

simp_kolom = np.array(simpson).T # Mentranspose variabel "trap" agar mudah dilihat outputnya
np.set_printoptions(precision=10)
print(simp_kolom)

"""### Galat Relatif Simpson"""

n_2 = []

for n in range (2,17):
  c_2 = n*1
  for i in range (1,n):
    n_2_array = float(c_2)
  n_2.append(n_2_array)
print(n_2)

gauss_errorsimp = []

for n in range (0,15):
  gauss_1c = Gauss
  #for i in range (1,n):
    #Gauss = float(hasil_1a)
  gauss_errorsimp.append(Gauss)
print(gauss_errorsimp)

gauss_errorsimp_kolom = abs(np.array(gauss_errorsimp).T) # Mentranspose variabel "galat_relatif" agar mudah dilihat outputnya
np.set_printoptions(precision=10)
print(gauss_errorsimp_kolom)

galat_simp = [] # Variabel kosong yang akan diisi hasil galat simp

for i in range(0,15):
  galat_simp.append (((gauss_errorsimp[i]-simpson[i])/gauss_errorsimp[i])*100) # Memasukkan nilai galat relatif ke dalam variabel "galat_simp"

galat_relatif_simp_kolom = abs(np.array(galat_simp).T) # Mentranspose variabel "galat_relatif" agar mudah dilihat outputnya
np.set_printoptions(precision=10)
print(galat_relatif_simp_kolom)

"""### Tabel Gabungan Simpson 1/3"""

data_1c = {'n' : n_2, 'Simpson 1/3' : simp_kolom, 'Galat Relatif Simpson 1/3 (%)' : galat_relatif_simp_kolom} 
df_1c = pd.DataFrame(data=data_1c) # Membentuk data frame dari array n, simpson, galat simpson
print(np.around(df_1c,10))

"""## Tabel Gabungan 1abc"""

import pandas as pd
import numpy as np

data1 = {'n' : n_1, 'Gauss' : gauss_kolom, 'Trapesium' : trap_kolom, 'Galat Relatif Trapesium (%)' : galat_relatif_trap_kolom} 
# yg hasil integral simpson dan error nya tidak di gabung disini karena ukuran array berbeda
df1 = pd.DataFrame(data=data1) # Membentuk data frame dari array gauss, trapesium, galat trapesium
print(np.around(df1,10))

data2 = {'n' : n_2, 'Gauss' : gauss_errorsimp_kolom, 'Simpson 1/3' : simp_kolom, 'Galat Relatif Simpson 1/3 (%)' : galat_relatif_simp_kolom}
df2 = pd.DataFrame(data=data2) # Membentuk data frame dari array gauss, simpson, galat simpson
print(np.around(df2,10))

"""## Grafik Gabungan 1abc"""

import matplotlib.pyplot as plt
from matplotlib.pyplot import figure

x_gauss = np.arange(2,32,1) # Menghasilkan angka dari 0 sampai 32 dengan beda antar angkanya 1
y_gauss = gauss # Menggunakan hasil variabel gauss

x_trap = np.arange(2,32,1) # Menghasilkan angka dari 0 sampai 32 dengan beda antar angkanya 1
y_trap = trap # Menggunakan hasil variabel trap

x_simp = np.arange(2,32,2) # Menghasilkan angka dari 0 sampai 32 dengan beda antar angkanya 2
y_simp = simpson # Menggunakan hasil variabel simp

# Menghasilkan grafik
plt.figure(figsize=(17, 12))
plt.plot(x_gauss,y_gauss, label ="Gauss Kuadratur", linestyle ="dotted",color="green", marker="o")
plt.plot(x_trap,y_trap, label ="Metode Trapesium", linestyle ="dotted",color="blue", marker="*")
plt.plot(x_simp,y_simp, label ="Metode Simpson 1/3", linestyle ="dotted",color="red", marker="^")
plt.xlabel('Banyak Titik (n)')
plt.ylabel('Nilai integral p(s)')
plt.title('Grafik hasil integral p(s) dengan beberapa metode')
plt.legend()
plt.show()

"""# No 2"""

import numpy as np

def f(x):
    return 2/(1+x**2)

#Input
a=float(input("Batas bawah = "))
b=float(input("Batas atas = "))
n=int(input("Banyaknya partisi = "))

#Jarak antar partisi
h = (b - a) / n

#Batas untuk integral tak wajar
aa = 0.0 
bb = 1/b 
hh = (bb-aa)/n


#Aturan Trapesium
print(" ")
print('Aturan Trapesium')
xt1 = np.linspace(a, b, n+1)
int_trap1 = f(a) + f(b)
sum_trap1 = 2*np.sum(f(xt1))
hasiltrap1 = (h/2)*(sum_trap1 - int_trap1)


xt2 = np.linspace(aa,bb,n+1)

int_trap2 = f(aa) + f(bb)
sum_trap2 = 2*np.sum(f(xt2))
hasiltrap2 = (hh/2)*(sum_trap2 - int_trap2)

hasiltrap = hasiltrap1 + hasiltrap2
galattrap = abs(np.pi-hasiltrap)/np.pi * 100


print('Hasil aproksimasi integral dengan aturan trapesium %0.5f' %(hasiltrap))
print('Galat sebenarnya untuk aproksimasi aturan trapesium (dalam bentuk persen) sebesar %0.5f' %(galattrap),'%')


#Aturan Simpson 1/3
print(" ")
print("Aproksimasi Simpson")
if np.mod(n,2)==0:
    xs1 = np.linspace(a,b,n+1)
    intsimp= f(a) + f(b)
    for i in range(1,n):
        if np.mod(i,2) == 0:
            intsimp = intsimp + 2 * np.sum(f(xs1[i]))
        else :
            intsimp = intsimp + 4 * np.sum(f(xs1[i]))
    hasilsimpson1=h/3*(intsimp)
    
    xs2 = np.linspace(aa,bb,n+1)
    intsimp2= f(aa) + f(bb)
    for i in range(1, n):
        if np.mod(i,2) == 0:
            intsimp2 = intsimp2 + 2 * np.sum(f(xs2[i]))
        else :
            intsimp2 = intsimp2 + 4 * np.sum(f(xs2[i]))
    hasilsimpson2=(hh / 3) * (intsimp2)
    
    hasilsimpson=hasilsimpson1+hasilsimpson2
    print('Hasil aproksimasi integral dengan aturan Simpson %0.5f' %(hasilsimpson))
    galatsimpson=abs(np.pi-hasilsimpson)/np.pi * 100
    print('Galat sebenarnya untuk aproksimasi aturan Simpson (dalam bentuk persen) sebesar %0.5f' %(galatsimpson),'%')
else:
    print('Hasil aproksimasi integral dengan aturan Simpson: Nilai n ganjil. Masukkan nilai n genap')


#Extended Midpoint Rules
print(" ")
print('Extended Midpoint Rules')
mp1 = np.linspace(h/2,b-h/2,n)

hasilemr1 = h*np.sum(f(mp1))


mp2 = np.linspace(hh/2,bb-hh/2,n)
hasilemr2 = hh*np.sum(f(mp2))

hasilemr = hasilemr1 + hasilemr2
galatemr = abs(np.pi-hasilemr)/np.pi * 100


print('Hasil aproksimasi integral dengan EMR %0.5f' %(hasilemr))
print('Galat sebenarnya untuk aproksimasi EMR (dalam bentuk persen) sebesar %0.5f'%(galatemr),'%')